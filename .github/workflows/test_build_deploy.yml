name: Test, Build & Deploy

on:
  push:
    branches: [staging, main]
    tags:
      - v*
  pull_request:
    branches: [staging, main]

jobs:
  test_build_deploy:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        DISTRIBUTION: ['DISTRIBUTION_0', 'DISTRIBUTION_1']

    env:
      DISTRIBUTION: ${{secrets[matrix.DISTRIBUTION]}}
      TEST_COVERAGE_FAIL_THRESHOLD: 10
      TEST_COVERAGE_WARNING_THRESHOLD: 50
      DEPLOYMENT_RECOVERY_TIMEOUT_SECONDS: 150
      AWS_APPLICATION_NAME: Account
      AWS_BUILD_ZIP_PATH: 'wire-account.zip'

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set & print environment variables
        env:
          GITHUB_CONTEXT: ${{toJson(github)}}
        run: |
          echo "::set-env name=BRANCH_NAME::$(git branch --show-current)"
          echo "::set-env name=TAG::$(git tag --points-at ${{github.sha}})"
          echo "::set-env name=COMMIT_MESSAGE::$(git log --format=%B -n 1 ${{github.event.after}})"
          echo "::set-env name=TITLE::$(echo '${{github.event.pull_request.title || github.event.head_commit.message}}' | head -n 1)"
          echo "::set-env name=PR_LAST_COMMIT_MESSAGE::$(git log --format=%B -n 1 ${{github.event.after}})"
          echo -e "BRANCH_NAME = ${BRANCH_NAME}"
          echo -e "TAG = ${TAG}"
          echo -e "TITLE = ${TITLE}"
          echo -e "PR_LAST_COMMIT_MESSAGE = ${PR_LAST_COMMIT_MESSAGE}"
          echo -e "GITHUB_CONTEXT = ${GITHUB_CONTEXT}"

      - name: Skip CI
        if: contains(env.TITLE || env.PR_LAST_COMMIT_MESSAGE, '[skip ci]') || contains(env.TITLE || env.PR_LAST_COMMIT_MESSAGE, '[ci skip]')
        uses: andymckay/cancel-action@0.2

      - name: Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.5.0
        with:
          access_token: ${{github.token}}

      - name: Yarn cache
        uses: c-hive/gha-yarn-cache@v1

      - name: Authenticate git clone
        env:
          GH_TOKEN: ${{secrets.OTTO_THE_BOT_GH_TOKEN}}
        run: echo -e "machine github.com\n  login ${GH_TOKEN}" > ~/.netrc

      - name: Install JS dependencies
        run: yarn --frozen-lockfile

      - name: Test
        if: env.DISTRIBUTION == 'wire'
        run: yarn test

      - name: Monitor coverage
        if: github.event_name == 'pull_request' && env.DISTRIBUTION == 'wire'
        uses: slavcodev/coverage-monitor-action@1.1.0
        with:
          github_token: ${{github.token}}
          clover_file: 'coverage/clover.xml'
          threshold_alert: ${{env.TEST_COVERAGE_FAIL_THRESHOLD}}
          threshold_warning: ${{env.TEST_COVERAGE_WARNING_THRESHOLD}}

      - name: Create commit file
        run: |
          mkdir -p ./dist
          echo -e "$GITHUB_SHA" > "./dist/commit"

      - name: Build staging
        if: ${{env.BRANCH_NAME == 'staging'}}
        run: yarn bundle:staging

      - name: Build production
        if: env.TAG != ''
        run: yarn bundle:prod

      - name: Deploy staging build to Elastic Beanstalk
        if: env.BRANCH_NAME == 'staging' && env.DISTRIBUTION == 'wire'
        uses: einaregilsson/beanstalk-deploy@v11
        with:
          aws_access_key: ${{secrets.WEBTEAM_AWS_ACCESS_KEY_ID}}
          aws_secret_key: ${{secrets.WEBTEAM_AWS_SECRET_ACCESS_KEY}}
          application_name: ${{env.AWS_APPLICATION_NAME}}
          environment_name: wire-account-staging
          region: eu-central-1
          deployment_package: ${{env.AWS_BUILD_ZIP_PATH}}
          wait_for_deployment: false
          wait_for_environment_recovery: ${{env.DEPLOYMENT_RECOVERY_TIMEOUT_SECONDS}}
          version_label: ${{github.run_id}}
          version_description: ${{github.sha}}

      - name: Deploy production build to Elastic Beanstalk
        if: env.TAG != '' && env.DISTRIBUTION == 'wire'
        uses: einaregilsson/beanstalk-deploy@v11
        with:
          aws_access_key: ${{secrets.WEBTEAM_AWS_ACCESS_KEY_ID}}
          aws_secret_key: ${{secrets.WEBTEAM_AWS_SECRET_ACCESS_KEY}}
          application_name: ${{env.AWS_APPLICATION_NAME}}
          environment_name: wire-account-prod
          region: eu-central-1
          deployment_package: ${{env.AWS_BUILD_ZIP_PATH}}
          wait_for_deployment: false
          wait_for_environment_recovery: ${{env.DEPLOYMENT_RECOVERY_TIMEOUT_SECONDS}}
          version_label: ${{env.TAG}}-${{github.run_id}}
          version_description: ${{github.sha}}

      - name: Push staging Docker image
        if: env.BRANCH_NAME == 'staging'
        env:
          DOCKER_PASSWORD: ${{secrets.WEBTEAM_QUAY_PASSWORD}}
          DOCKER_USERNAME: ${{secrets.WEBTEAM_QUAY_USERNAME}}
        run: |
          if [ "$DISTRIBUTION" == "wire" ]; then
            yarn docker '' staging
          else
            yarn docker "$DISTRIBUTION" staging
          fi

      - name: Push production Docker image
        if: env.TAG != ''
        env:
          DOCKER_PASSWORD: ${{secrets.WEBTEAM_QUAY_PASSWORD}}
          DOCKER_USERNAME: ${{secrets.WEBTEAM_QUAY_USERNAME}}
        run: |
          if [ "$DISTRIBUTION" == "wire" ]; then
            yarn docker '' production
          else
            yarn docker "$DISTRIBUTION" production
          fi

      - name: Create GitHub release draft
        id: create_release
        if: env.TAG != '' && env.DISTRIBUTION == 'wire'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{github.token}}
        with:
          tag_name: ${{env.TAG}}
          release_name: ${{env.TAG}}
          body_path: ./CHANGELOG.md
          draft: true
          prerelease: false
